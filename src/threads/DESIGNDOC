+----------------------+
| SISTEMAS DE OPERAÇÃO |
|                      |
|  PROJECTO O1         |
|  DESIGN DOCUMENT     |
+----------------------+

---- GROUP ----
Nuno Gomes <p111082@campus.fct.unl.pt>
Serhiy Moskovchuk <??@campus.fct.unl.pt>


---- PRELIMINARIES ----
Appendix D: Project Documentation
100
>> If you have any preliminary comments on your submission, notes for
>> the TAs, or extra credit, please give them here.
(This is a sample design document.)
>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation,
>> course text, and lecture notes.
None.


JOIN
====
---- DATA STRUCTURES ----
>> Copy here the declaration of each new or changed ‘struct’ or ‘struct’
>> member, global or static variable, ‘typedef’, or enumeration.
>> Identify the purpose of each in 25 words or less.




---- ALGORITHMS ----
timer_sleep: alterações feitas têm o intuito de colocar a thread em modo
bloqueado. Bloquear a thread e invocar o escalonador é feito com a chamada a
função thread.thread_block().

TODO




---- SYNCHRONIZATION ----
>>
>>
>>
>>
>>
Consider parent thread P with child thread C. How do you ensure
proper synchronization and avoid race conditions when P calls wait(C)
before C exits? After C exits? How do you ensure that all resources
are freed in each case? How about when P terminates without waiting,
before C exits? After C exits? Are there any special cases?
C waits in thread_exit() for P to die before it finishes its own
exit, using the can_die semaphore "down"ed by C and "up"ed by P as
it exits. Regardless of whether whether C has terminated, there
is no race on wait(C), because C waits for P’s permission before
it frees itself.

---- RATIONALE ----



>> Critique your design, pointing out advantages and disadvantages in
>> your design choices.
Era possível utilizar a função já fornecida thread_foreach, mas partindo do
princio que as threads a chamarem o timer_sleep serão um grupo reduzido,
cria-se uma nova estrutura de dados (sleep_list).
